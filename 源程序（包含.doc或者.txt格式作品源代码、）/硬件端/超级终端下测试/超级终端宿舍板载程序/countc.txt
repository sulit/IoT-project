#include "count.h"
#include "uartGetPut.h"
#include <stdio.h>
#include  "buzzer.h"

//原本打算声光报警，未解决，只采取声音报警，效果应该不错
/*#include  "systemInit.h"

#define LED1_PERIPH      SYSCTL_PERIPH_GPIOG     //提醒锁门进入光报警
#define LED1_PORT        GPIO_PORTDG_BASE
#define LED1_PIN         GPIO_PIN_3

 SysCtlPeriEnable(LED1_PERIPH);
    GPIOPinTypeOut(LED1_PORT,LED1_PIN);
    
    GPIOPinWrite(LED1_PORT,LED1_PIN,0x00);
    SysCtlDelay(100 * (TheSysClock / 3000));
    GPIOPinWrite(LED1_PORT,LED1_PIN,0xFF);*/




int flagPerson;   //1--in 0--out 
int count=0;
int precount = 0;
int flag1 = 0;
int flag2 = 0;
char str[10];
void BZ_Init(void)
{

    SysCtlPeriEnable(BZ);                           
    GPIOPinTypeIn(BZ_PORT,BZ_PIN_1);
    GPIOPinTypeIn(BZ_PORT,BZ_PIN_2);
    GPIOIntTypeSet(BZ_PORT, BZ_PIN_1,GPIO_FALLING_EDGE );     
    GPIOIntTypeSet(BZ_PORT, BZ_PIN_2,GPIO_FALLING_EDGE ); 
    GPIOPinIntEnable(BZ_PORT, BZ_PIN_1);    
    GPIOPinIntEnable(BZ_PORT, BZ_PIN_2);                   
    IntEnable(INT_GPIOF);                                   
    IntMasterEnable();  
  }
//  GPIOF的中断服务函数
void GPIO_Port_F_ISR(void)
{
    unsigned long ulStatus;
    ulStatus = GPIOPinIntStatus(BZ_PORT, true);            //  读取中断状态
    GPIOPinIntClear(BZ_PORT, ulStatus);                    //  清除中断状态，重要

    if (ulStatus & BZ_PIN_1)                          //  如果BZ1的中断状态有效
    {
          if(flag2 == 1)
          {
            count--;
            if(count <0)
              count = 0;
            uartPuts("1人离开");
            flag2 = 0;
           if(count==0)
           {
             
             uartPuts("请锁门！");
             SysCtlDelay(100*(TheSysClock/3000));
              buzzerInit();
          buzzerSound(1500);            //  蜂鸣器发出1500Hz声音
          SysCtlDelay(400 * (TheSysClock / 3000));  //  延时约400ms

          buzzerSound(2000);            //  蜂鸣器发出2000Hz声音
          SysCtlDelay(400 * (TheSysClock / 3000));  //  延时约400ms
          
      /*    //光报警PC6
          
          GPIOPinWrite(LED1_PORT,LED1_PIN,0X00);
          SysCtlDelay(400 * (TheSysClock / 3000));
          //SysCtlPeriEnable(COLOR1_PERIPH);
          GPIOPinWrite(LED1_PORT,LED1_PIN,0XFF);
          SysCtlDelay(400 * (TheSysClock / 3000));
             */
            
           }
           else
           {
            sprintf(str,"宿舍现有人数:%2d",count);
            uartPuts(str);
            SysCtlDelay(100*(TheSysClock/3000));
            SysCtlDelay(100*(TheSysClock/3000));
           }

          }
          else
          {
            flag1 = 1;
          }
    }
    if(ulStatus&BZ_PIN_2)
    {
          if(flag1 == 1)
          {
            count++;
            flag1 = 0; 
            flagPerson=1;
            uartPuts("1人进入");
            SysCtlDelay(100*(TheSysClock/3000));
            sprintf(str,"宿舍现有人数:%2d",count);
            uartPuts(str);
            SysCtlDelay(100*(TheSysClock/3000));

          }
          else
          {
            flag2 = 1;
          } 
   } 

}