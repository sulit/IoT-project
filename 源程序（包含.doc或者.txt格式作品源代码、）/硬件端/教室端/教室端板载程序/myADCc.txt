#include "myADC.h"
#include "adc.h"

tBoolean ADC_EndFlag2 = false;//  定义ADC转换结束的标志

//  ADC初始化
void adcInit2(void)
{
    SysCtlPeriEnable(SYSCTL_PERIPH_ADC);                    //  使能ADC模块
    SysCtlADCSpeedSet(SYSCTL_ADCSPEED_125KSPS);             //  设置ADC采样速率
    ADCSequDisable(ADC_BASE, 1);                            //  配置前先禁止采样序列

    //  采样序列配置：ADC基址，采样序列编号，触发事件，采样优先级
    ADCSequConfig(ADC_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);

    //  采样步进设置：ADC基址，采样序列编号，步值，通道设置
    ADCSequStepConfig(ADC_BASE, 1, 0, ADC_CTL_CH1 |
                                      ADC_CTL_END |
                                      ADC_CTL_IE);

    ADCIntEnable(ADC_BASE, 1);                              //  使能ADC中断
    //IntPrioritySet(INT_ADC1,2<<5);
    IntEnable(INT_ADC1);                                    //  使能ADC采样序列中断
    IntMasterEnable();                                      //  使能处理器中断
    
    ADCSequEnable(ADC_BASE, 1);                             //  使能采样序列
}


//  ADC采样
unsigned long adcSample2(void)
{
    unsigned long ulValue;

    ADCProcessorTrigger(ADC_BASE, 1);                       //  处理器触发采样序列
    while (!ADC_EndFlag2);                                   //  等待采样结束
    ADC_EndFlag2 = false;                                    //  清除ADC采样结束标志
    ADCSequDataGet(ADC_BASE, 1, &ulValue);                  //  读取ADC转换结果

    return(ulValue);
}

//  ADC采样序列0的中断
void ADC_Sequence_1_ISR(void)
{
    unsigned long ulStatus;

    ulStatus = ADCIntStatus(ADC_BASE, 1, true);             //  读取中断状态
    ADCIntClear(ADC_BASE, 1);                               //  清除中断状态，重要

    if (ulStatus != 0)                                      //  如果中断状态有效
    {
        ADC_EndFlag2 = true;                                 //  置位ADC采样结束标志
    }
}